# -*- coding: utf-8 -*-
"""NLP Chat bot Sanskar Nenawati .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12TpnyfRiL8ZniU85R-NXA8nepQ8WTYpp
"""

# import spacy
# from sklearn.feature_extraction.text import TfidfVectorizer
# from sklearn.metrics.pairwise import cosine_similarity

# # Load spaCy's English model
# nlp = spacy.load('en_core_web_sm')

# # Define a list of predefined questions and responses
# qa_pairs = {
#     "Who are you?": "Hi! I'm Sanskar Nenawati , a Aiml Engineer.",
#     "What do you do?": "I am a Aiml Developer  with expertise in Machine Learning,data analytics, NLP,Gen AI,.",
#     "What are your skills?": "I specialize in Languages: Python , HTML, CSS, SQL,MongoDB , Tools: Amazon AWS,VS Code, Git/GitHub, PowerBI, Jupyter Notebook, PyCharm,  Libraries: Pytorch,OpenCV, scikit-learn, Pandas, Numpy..",
#     "Tell me about your projects": "I have worked on many projects you can check out on https://sanskarnenawati.info/#project-section.",
#     "How can I contact you?": "You can contact me at Sanskarnenawati@yahoo.com."
# }

# # Preprocess the questions using spaCy
# questions = list(qa_pairs.keys())
# responses = list(qa_pairs.values())

# # Vectorize the questions using TF-IDF
# vectorizer = TfidfVectorizer()
# tfidf_matrix = vectorizer.fit_transform(questions)

# def chatbot_response(user_input):
#     # Preprocess user input
#     user_input_vector = vectorizer.transform([user_input])

#     # Compute cosine similarity between user input and predefined questions
#     similarities = cosine_similarity(user_input_vector, tfidf_matrix)

#     # Get the index of the most similar question
#     best_match_index = similarities.argmax()

#     # Return the corresponding response
#     return responses[best_match_index]

# # Test the chatbot
# user_input = "Can you tell me about your projects?"
# response = chatbot_response(user_input)
# print(response)

# # Test the chatbot
# user_input = "Can you tell me about yourself?"
# response = chatbot_response(user_input)
# print(response)

# # Test the chatbot
# user_input = "skills"
# response = chatbot_response(user_input)
# print(response)

from flask import Flask, request, jsonify
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

app = Flask(__name__)

# Define questions and responses
qa_pairs = {
     "Who are you?": "Hi! I'm Sanskar Nenawati , a Aiml Engineer.",
    "What do you do?": "I am a Aiml Developer  with expertise in Machine Learning,data analytics, NLP,Gen AI,.",
    "What are your skills?": "I specialize in Languages: Python , HTML, CSS, SQL,MongoDB , Tools: Amazon AWS,VS Code, Git/GitHub, PowerBI, Jupyter Notebook, PyCharm,  Libraries: Pytorch,OpenCV, scikit-learn, Pandas, Numpy..",
    "Tell me about your projects": "I have worked on many projects you can check out on https://sanskarnenawati.info/#project-section.",
    "How can I contact you?": "You can contact me at Sanskarnenawati@yahoo.com."
}

# Vectorize questions
questions = list(qa_pairs.keys())
responses = list(qa_pairs.values())
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(questions)

# Route to handle chatbot queries
@app.route('/chat', methods=['POST'])
def chatbot():
    user_input = request.json.get('message', '')
    user_vector = vectorizer.transform([user_input])
    similarities = cosine_similarity(user_vector, tfidf_matrix)
    best_match_index = similarities.argmax()
    response = responses[best_match_index]
    return jsonify({"response": response})

if __name__ == "__main__":
    app.run(debug=True)

